@using Blazorise.Localization
@inject IJSRuntime JSRuntime

<Bar @bind-Visible="@topbarVisible" 
Breakpoint="Breakpoint.Desktop" 
Style="background-color:black; color: white;"
ThemeContrast="ThemeContrast.Light"
VerticalAlignment="VerticalAlignment.Middle">
    <Container>
        <BarStart>
            <BarBrand>
                <BarItem>
                     <BarLink To="">
                        <Figure Size="FigureSize.Is24x24" Width="Width.Is25">
                            <FigureImage Source="/crosslinklogo2.png" AlternateText="CrossLinkLogo" />
                        </Figure>
                    </BarLink>
                </BarItem>
            </BarBrand>
        </BarStart>
        <BarToggler />
        <BarMenu>
            <BarEnd>
                <BarItem>
                    <BarLink To="/">Home</BarLink>
                </BarItem>
                <BarItem>
                    <BarLink @onclick="() => ScrollToContainer(navProgress)">Progress</BarLink>
                </BarItem>
                <BarItem>
                    <BarLink Style="min-inline-size: max-content;" @onclick="() => ScrollToContainer(navAboutUs)">About Us</BarLink>
                </BarItem>
                <BarItem>
                    <BarLink @onclick="() => ScrollToContainer(navTeam)">Team</BarLink>
                </BarItem>
                <BarItem>
                    <BarLink Style="min-inline-size: max-content;" @onclick="() => ScrollToContainer(navContactUt)">Contact Us</BarLink>
                </BarItem>
            </BarEnd>
        </BarMenu>
    </Container>
</Bar>
@code {
    protected override async Task OnInitializedAsync()
    {
        await SelectCulture( "en-US" );

        await base.OnInitializedAsync();
    }

    Task SelectCulture( string name )
    {
        LocalizationService.ChangeLanguage( name );

        return Task.CompletedTask;
    }

    private bool topbarVisible = false;

    Task OnLayoutTypeChecked( string layoutType )
    {
        LayoutType = layoutType;

        return LayoutTypeChanged.InvokeAsync( layoutType );
    }

    [Parameter] public EventCallback<bool> ThemeEnabledChanged { get; set; }

    [Parameter] public EventCallback<bool> ThemeGradientChanged { get; set; }

    [Parameter] public EventCallback<bool> ThemeRoundedChanged { get; set; }

    [Parameter] public EventCallback<string> ThemeColorChanged { get; set; }

    [Parameter] public string LayoutType { get; set; }

    [Parameter] public EventCallback<string> LayoutTypeChanged { get; set; }

    [Inject] protected ITextLocalizerService LocalizationService { get; set; }

    [CascadingParameter] protected Theme Theme { get; set; }

    public static string navProgress = "Progress";
    public static string navAboutUs = "AboutUs";
    public static string navTeam = "Team";
    public static string navContactUt = "ContactUs";

    @code {
        private async Task ScrollToContainer(string pointer)
        {
            await JSRuntime.InvokeVoidAsync("ScrollToContainer", pointer);
        }
    }
}